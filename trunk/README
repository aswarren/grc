

About GRC:

The Genome Reverse Compiler (GRC) is an automated annotation tool
designed for prokaryotic genomes. The goal is to provide an
open-source, easy-to-run, very efficient annotation program.
In this initial version 0.01, GRC only annotates protein-coding genes.

In addition to the genome sequence, GRC requires a
multiFASTA file with annotated genes. GRC will perform best when these
genes are well annotated and come from organisms closely related to
the target genome. GRC finds genes and assigns functional annotations
based on sequence similarity. It incorporates an open source version
of BLAST (FSA-BLAST)[1] to perform functional assignment.
First grc_orfs is run to generate all
possible ORFs for the given genome. The translated sequences are then
checked for sequence similarity against the user-specified database
using FSA-BLAST. Some ORFs are then discarded and start sites adjusted
based on overlap, BLAST score, length, and sequence content[2].
Resulting putative genes are assigned functions based on the annotation
of their corresponding best BLAST hits.


Downloading, installing, and requirements:

The GRC is available to download as source code and comes with precompiled binaries
on an intel x86 linux machine.  It requires that you have standard
installations of g++ and perl.  If you are unable to execute the binaries provided
then you must recompile.  An install script is available under the scripts directory
which will attempt to recompile each executable and place it in its appropriate location. 

On a typical unix system you can decompress using the following commands:
gzip -d GRC.tar.gz
tar -xf GRC.tar

To run the install script change to the GRC/scripts/ directory and type:
./install.pl


Input formats:
GRC expects the input to be in a certain format.
The extensions for these formats are (*.faa *.ptt *.fna *.fasta *.CP *.goa).
GRC expects that the file's extension match it's formatting, if it does not then GRC
will most likely crash.

(*.fna) NCBI "nucleotide fasta" format. Currently this is the only format/extension that GRC supports for the genomic sequence. Also it is assumed that there is only one (prokaryotic) replicon per file.

(*.faa) NCBI "amino acid fasta" format. This file is used by GRC to create a sequence database that is used to annotate the genome of interest.

(*.ptt) NCBI "protein table" format. This file can be used in two different ways. (1) If it is
provided in the GRC/DB/ folder then it will be automatically parsed and merged with the
cooresponding *.faa file. This feature exists because the location of the function
description is not standard in fasta headers. So the merging of the *.ptt function and the *.faa
sequence will lead to more concise annotation than if left to *.faa parsing guesswork.
(2) GRC has a compare feature (using the -r command line option) that gives an evaluation
of the GRC annotation with respect to a designated reference file. The *.ptt file can be
used to evaluate GRC's performance if the NCBI formats are in use.

(*.fasta) EMBL "amino acid fasta" format. This sequence format is like the *.faa format in
creating sequence database.

(*.goa) EMBL "gene ontology annnotation" format. Similar to (*.ptt) this format can be used 
it two ways. (1) As an annotation file used in creating a database with *.fasta files. Again
each *.goa file in /GRC/DB/ will be merged with its cooresponding *.fasta file to create
an annotation database. (2) This format can also be used in conjunction with the *.CP format
to evaluate the performance of the GRC using the Gene Ontology[3]. This aspect of the GRC is 
explained in the "Evaluation, Using GO" section.

(*.CP) EMBL "chromosome table" format. This format is used only in the evaluation of GRC
performance (-r command line option) when EMBL formats are in use.


Running the program:
Example 1 for running GRC:
./GRCv0.01.pl -g AE008687.fna -d ./DBdir/

Example 2 for running GRC:
./GRCv0.01.pl -g AE008687.fna -d ./DBdir/DC3000.faa

Currently the GRC only supports specific fasta formats.  The annotation files (or annotation database)
must be in *.faa format.  The genome sequence must be in *.fna format (assumes one genomic sequence per
file). You have two options in specifiying the files to be used for annotation (1) you may specify
a directory containing the *.faa files or (2) you may specify a file containing all annotations
that are to be used.  If you specify a directory the GRC will attempt to merge all compatibly formatted files in that
directory into Automerge.faa which it will then use to create the annotation database.
For convenience, a fasta merging script is available under the scripts directory that will
merge fasta files given as command line parameters (*!This file is used by GRC when automerging
so do not remove it!*).



Output files & formats:
Annotation Results:
Currently folders are created under the GRC/resuts/ directory.  These folders are named according to
the organism and minimum gene length specified.  Three tab-delimited results files are placed in this folder.
(1) *.Pos  Gives the putative genes that are likely to exist and their resulting annotation (according to GRC methodology).
(2) *.Neg  Gives the orfs that were eliminated from the long-orf output.
(3) KnockList.txt  Provides a record of elimination
(*.Pos; *.Neg; *.FNAnalysis; *.compare; KnockList.txt)

(*.Pos) This is the annotation file for the target genome. It contains information
about the genes that GRC "believes" exists.

(*.Neg) These are putative genes generated by the grc_orfs component that
were later rejected by GRC.

(*.compare) This file is the generated by the compare component (command option -r) of GRC. It
gives statistics of GRC's performance with respect to the reference file and classifies
putative genes as being True Positives (TP- sequences that are correctly put forward as genes), 
False Positives (FP- sequences that are incorrectly put forward as genes), (TN- sequences that 
were correctly rejected as genes), and False Negatives (FN- sequences that were incorrectly
rejected).

(*.FNAnalysis) This file is generated by the compare component (command option -r) of GRC. It
provides information with respect to the False Negatives (those genes that, according to 
the reference file, were erroneously rejected) more on this in the "Evaluation, Using GO" section.

(KnockList.txt) This file is generated by the rejection phase of GRC as record of "who knocked
out who" and is used by the compare component to provide detailed information in the *.compare
and *.FNAnalysis files.


Evaluation Section:
Coming soon!

References:
[1] Cameron M, Williams HE, Cannane A.
A deterministic finite automaton for faster protein hit detection in BLAST.
J Comput Biol. 2006 May;13(4):965-78.
[2] Ouyang Z, Zhu H, Wang J, She ZS. 
Multivariate entropy distance method for prokaryotic gene identification.
J Bioinform Comput Biol. 2004 Jun;2(2):353-73
[3]  	Ashburner M, Ball CA, Blake JA, Botstein D, Butler H, Cherry JM, Davis AP, Dolinski K, Dwight SS, Eppig JT, Harris MA, Hill DP, Issel-Tarver L, Kasarskis A, Lewis S, Matese JC, Richardson JE, Ringwald M, Rubin GM, Sherlock G. 
Gene ontology: tool for the unification of biology. The Gene Ontology Consortium.


.
